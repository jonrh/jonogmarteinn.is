# CircleCI 2.1 configuration file, https://circleci.com/docs/2.0/language-javascript/
version: 2.1

jobs:
  build:
    docker:
      - image: cimg/node:12.16

    steps:
      - checkout

      - run:
          name: Install AWS command line interface to be able to deploy to S3 and CloudFront later
          # Installs the AWS command line interface v2 so we can deploy our frontend assets to S3
          # and invalidate the CloudFront cache in later steps. Another option to do this would be
          # to use the circleci/aws-cli orb but at the time of writing it can only install AWS cli
          # v1. There are no API differences but v1 requires Python and a bunch of other stuff
          # whereas AWS cli v2 is a self contained binary (faster and simpler to set up).
          #
          # https://circleci.com/docs/2.0/using-orbs/
          # https://circleci.com/orbs/registry/orb/circleci/aws-cli
          # https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Install Node dependencies with Yarn
          # --frozen-lockfile: for reproducible installs in continuous deployment setups
          command: yarn install --frozen-lockfile

      - run:
          name: Build GatsbyJS site, i.e. generate the public/ folder
          command: yarn run build

      - run:
          name: Generate robots.txt files for production and dev
          # Add a robots.txt file. Having a compliant robots.txt file aids search engine
          # optimization. When we are deploying to the master branch (production) we want to allow
          # web crawlers access to the entire site. Note the missing '/' after 'Disallow: '. This
          # is the spec compliant way to indicate the site can be crawled, that is it means nothing
          # is disallowed to crawl (go nuts). If we are pushing on any other branch than the master
          # branch we add a robots.txt file that disallows all crawling. This is desired since we
          # don't want our development environment to be indexed and searchable in search engines.
          # Notice that the second line is not indented ("Disallow: ..."). This is on purpose.
          # Otherwise it will be indented (creating a spec in-compliant robots.txt file). I tried
          # outputting the file with EOF/END without luck.
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
                echo 'User-agent: *
            Disallow: ' > public/robots.txt
            else
                echo 'User-agent: *
            Disallow: /' > public/robots.txt
            fi

      - deploy:
          name: Deploy site to AWS S3 and invalidate the CloudFront cache
          # The first step is to synchronize the contents of the public/ folder to the
          # corresponding S3 bucket. Files that don't exist in the public/ folder are deleted in
          # the S3 bucket.
          #
          # The environment variable AWS_PAGER defined before the CloudFront commands is a
          # temporary fix for a bug in AWS cli v2. At the time of writing AWS cli v2 requires a
          # pager program, by default the command `less`. And lucky for us `less` is not available
          # in the CircleCI containers we run in. The good news is we can configure AWS cli to not
          # use any pager (the empty string "") and instead just print the entire output of results
          # out. For this case it's completely fine. See: https://github.com/aws/aws-cli/issues/5038
          #
          # Environment variables defined in the CircleCI project:
          #   + $CLOUDFRONT_ID: jonogmarteinn.is AWS CloudFront distribution ID for production
          #   + $CLOUDFRONT_DEV_ID: dev.jonogmarteinn.is AWS CloudFront distribution ID for dev
          command: |
              if [ "${CIRCLE_BRANCH}" == "master" ]; then
                  echo "On the master branch. Deploying to production: jonogmarteinn.is"
                  aws s3 sync public/ s3://jonogmarteinn.is/ --delete
                  AWS_PAGER="" aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths '/*'
              elif [ "${CIRCLE_BRANCH}" == "dev" ]; then
                  echo "On the dev branch. Deploying to dev: dev.jonogmarteinn.is"
                  aws s3 sync public/ s3://dev.jonogmarteinn.is/ --delete
                  AWS_PAGER="" aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DEV_ID --paths '/*'
              else
                  echo "Not master or dev branch so not deploying anything"
              fi
