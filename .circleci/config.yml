# Javascript Node CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
version: 2

jobs:
  build:
    docker:
      - image: circleci/node:10.16.3

    steps:
      - checkout

      - run:
          name: Install awscli, doesn't come by default with the node:10.16.3 image
          # Python 2.7 comes by default with the Ubuntu container CircleCI uses.
          # However it doesn't comes with python-dev which is required for installing pip. If not
          # installed there will be an error when installing the package "wheel". The next two
          # commands fetches the pip install script and installs pip. After installing pip we add
          # pip to the path (so we can subsequently use the command "pip"). This is required
          # because awscli has other dependencies which requires the existence of pip on the path.
          # Finally we install awscli.
          #
          # It should be noted this is a hack to get awscli in a Node container. In CircleCI v1 the
          # images came by default with awscli, so this mess wasn't required. In CircleCI v2.1
          # there are now Orbs, for example the official aws-cli orb:
          # https://circleci.com/orbs/registry/orb/circleci/aws-cli
          # This would be the proper way to install and use aws-cli in CircleCI, but it requires
          # enabling pipelines which comes with their own set of trade offs I haven't had the time
          # yet to look into and try out.
          command: |
              sudo apt-get install python-dev
              curl -O https://bootstrap.pypa.io/get-pip.py
              python get-pip.py --user
              export PATH=~/.local/bin:$PATH
              pip install awscli --upgrade --user

      - run:
          name: Generate robots.txt files for production and dev
          # Add a robots.txt file. Having a compliant robots.txt file aids search engine
          # optimization. When we are deploying to the master branch (production) we want to allow
          # web crawlers access to the entire site. Note the missing '/' after 'Disallow: '. This
          # is the spec compliant way to indicate the site can be crawled, that is it means nothing
          # is disallowed to crawl (go nuts). If we are pushing on any other branch than the master
          # branch we add a robots.txt file that disallows all crawling. This is desired since we
          # don't want our development environment to be indexed and searchable in search engines.
          # Notice that the second line is not indented ("Disallow: ..."). This is on purpose.
          # Otherwise it will be indented (creating a spec in-compliant robots.txt file). I tried
          # outputting the file with EOF/END without luck.
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
                echo 'User-agent: *
            Disallow: ' > public/robots.txt
            else
                echo 'User-agent: *
            Disallow: /' > public/robots.txt
            fi

      - deploy:
          name: Deploy site to AWS S3 and invalidate the CloudFront cache
          # The first step is to synchronize the contents of the public/ folder to the
          # corresponding S3 bucket. Files that don't exist in the public/ folder are deleted in
          # the S3 bucket.
          #
          #
          # Environment variables defined in the CircleCI project:
          #   + $CLOUDFRONT_ID: jonogmarteinn.is AWS CloudFront distribution ID for production
          #   + $CLOUDFRONT_DEV_ID: dev.jonogmarteinn.is AWS CloudFront distribution ID for dev
          command: |
              if [ "${CIRCLE_BRANCH}" == "master" ]; then
                  echo "On the master branch. Deploying to production: jonogmarteinn.is"
                  ~/.local/bin/aws s3 sync public/ s3://jonogmarteinn.is/ --delete
                  ~/.local/bin/aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths '/*'
              elif [ "${CIRCLE_BRANCH}" == "dev" ]; then
                  echo "On the dev branch. Deploying to dev: dev.jonogmarteinn.is"
                  ~/.local/bin/aws s3 sync public/ s3://dev.jonogmarteinn.is/ --delete
                  ~/.local/bin/aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DEV_ID --paths '/*'
              else
                  echo "Not master or dev branch so not deploying anything"
              fi
